/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * RemInr Api
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions } from "@tanstack/react-query";
import type { UploadFileRequestDto, UploadFileResponseDto } from "./models";
import { mutator } from "./mutators/index";
import type { ErrorType } from "./mutators/index";

export const uploadControllerUpload = (uploadFileRequestDto: UploadFileRequestDto) => {
	const formData = new FormData();
	formData.append("file", uploadFileRequestDto.file);
	formData.append("path", uploadFileRequestDto.path);
	if (uploadFileRequestDto.fileName !== undefined) {
		formData.append("fileName", uploadFileRequestDto.fileName);
	}

	return mutator<UploadFileResponseDto>({
		url: `/api/v1/upload`,
		method: "POST",
		headers: { "Content-Type": "multipart/form-data" },
		data: formData,
	});
};

export const getUploadControllerUploadMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof uploadControllerUpload>>,
		TError,
		{ data: UploadFileRequestDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof uploadControllerUpload>>,
	TError,
	{ data: UploadFileRequestDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof uploadControllerUpload>>,
		{ data: UploadFileRequestDto }
	> = (props) => {
		const { data } = props ?? {};

		return uploadControllerUpload(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UploadControllerUploadMutationResult = NonNullable<
	Awaited<ReturnType<typeof uploadControllerUpload>>
>;
export type UploadControllerUploadMutationBody = UploadFileRequestDto;
export type UploadControllerUploadMutationError = ErrorType<unknown>;

export const useUploadControllerUpload = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof uploadControllerUpload>>,
		TError,
		{ data: UploadFileRequestDto },
		TContext
	>;
}) => {
	const mutationOptions = getUploadControllerUploadMutationOptions(options);

	return useMutation(mutationOptions);
};

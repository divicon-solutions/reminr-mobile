/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * RemInr Api
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type { MutationFunction, UseMutationOptions } from "@tanstack/react-query";
import type {
	CreatePushTokenDto,
	PushTokenDto,
	PushTokensControllerUnsubscribeParams,
} from "./models";
import { mutator } from "./mutators/index";
import type { ErrorType } from "./mutators/index";

export const pushTokensControllerCreate = (createPushTokenDto: CreatePushTokenDto) => {
	return mutator<PushTokenDto>({
		url: `/api/v1/push-tokens`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createPushTokenDto,
	});
};

export const getPushTokensControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof pushTokensControllerCreate>>,
		TError,
		{ data: CreatePushTokenDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof pushTokensControllerCreate>>,
	TError,
	{ data: CreatePushTokenDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof pushTokensControllerCreate>>,
		{ data: CreatePushTokenDto }
	> = (props) => {
		const { data } = props ?? {};

		return pushTokensControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type PushTokensControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof pushTokensControllerCreate>>
>;
export type PushTokensControllerCreateMutationBody = CreatePushTokenDto;
export type PushTokensControllerCreateMutationError = ErrorType<unknown>;

export const usePushTokensControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof pushTokensControllerCreate>>,
		TError,
		{ data: CreatePushTokenDto },
		TContext
	>;
}) => {
	const mutationOptions = getPushTokensControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const pushTokensControllerUnsubscribe = (params: PushTokensControllerUnsubscribeParams) => {
	return mutator<PushTokenDto>({
		url: `/api/v1/push-tokens/unsubscribe`,
		method: "DELETE",
		params,
	});
};

export const getPushTokensControllerUnsubscribeMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof pushTokensControllerUnsubscribe>>,
		TError,
		{ params: PushTokensControllerUnsubscribeParams },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof pushTokensControllerUnsubscribe>>,
	TError,
	{ params: PushTokensControllerUnsubscribeParams },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof pushTokensControllerUnsubscribe>>,
		{ params: PushTokensControllerUnsubscribeParams }
	> = (props) => {
		const { params } = props ?? {};

		return pushTokensControllerUnsubscribe(params);
	};

	return { mutationFn, ...mutationOptions };
};

export type PushTokensControllerUnsubscribeMutationResult = NonNullable<
	Awaited<ReturnType<typeof pushTokensControllerUnsubscribe>>
>;

export type PushTokensControllerUnsubscribeMutationError = ErrorType<unknown>;

export const usePushTokensControllerUnsubscribe = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof pushTokensControllerUnsubscribe>>,
		TError,
		{ params: PushTokensControllerUnsubscribeParams },
		TContext
	>;
}) => {
	const mutationOptions = getPushTokensControllerUnsubscribeMutationOptions(options);

	return useMutation(mutationOptions);
};

/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * RemInr Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type { CreateUserDto, UpdateUserDto } from "./models";
import { mutator } from "./mutators/index";
import type { ErrorType } from "./mutators/index";

export const usersControllerCreate = (createUserDto: CreateUserDto) => {
	return mutator<string>({
		url: `/api/v1/users`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createUserDto,
	});
};

export const getUsersControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof usersControllerCreate>>,
		TError,
		{ data: CreateUserDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof usersControllerCreate>>,
	TError,
	{ data: CreateUserDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof usersControllerCreate>>,
		{ data: CreateUserDto }
	> = (props) => {
		const { data } = props ?? {};

		return usersControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UsersControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof usersControllerCreate>>
>;
export type UsersControllerCreateMutationBody = CreateUserDto;
export type UsersControllerCreateMutationError = ErrorType<unknown>;

export const useUsersControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof usersControllerCreate>>,
		TError,
		{ data: CreateUserDto },
		TContext
	>;
}) => {
	const mutationOptions = getUsersControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const usersControllerFindAll = (signal?: AbortSignal) => {
	return mutator<string>({ url: `/api/v1/users`, method: "GET", signal });
};

export const getUsersControllerFindAllQueryKey = () => {
	return [`/api/v1/users`] as const;
};

export const getUsersControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUsersControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindAll>>> = ({ signal }) =>
		usersControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof usersControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type UsersControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof usersControllerFindAll>>
>;
export type UsersControllerFindAllQueryError = ErrorType<unknown>;

export const useUsersControllerFindAll = <
	TData = Awaited<ReturnType<typeof usersControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getUsersControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const usersControllerFindOne = (id: string, signal?: AbortSignal) => {
	return mutator<string>({ url: `/api/v1/users/${id}`, method: "GET", signal });
};

export const getUsersControllerFindOneQueryKey = (id: string) => {
	return [`/api/v1/users/${id}`] as const;
};

export const getUsersControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getUsersControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerFindOne>>> = ({ signal }) =>
		usersControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof usersControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type UsersControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof usersControllerFindOne>>
>;
export type UsersControllerFindOneQueryError = ErrorType<unknown>;

export const useUsersControllerFindOne = <
	TData = Awaited<ReturnType<typeof usersControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof usersControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getUsersControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const usersControllerUpdate = (id: string, updateUserDto: UpdateUserDto) => {
	return mutator<string>({
		url: `/api/v1/users/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateUserDto,
	});
};

export const getUsersControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof usersControllerUpdate>>,
		TError,
		{ id: string; data: UpdateUserDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof usersControllerUpdate>>,
	TError,
	{ id: string; data: UpdateUserDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof usersControllerUpdate>>,
		{ id: string; data: UpdateUserDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return usersControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type UsersControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof usersControllerUpdate>>
>;
export type UsersControllerUpdateMutationBody = UpdateUserDto;
export type UsersControllerUpdateMutationError = ErrorType<unknown>;

export const useUsersControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof usersControllerUpdate>>,
		TError,
		{ id: string; data: UpdateUserDto },
		TContext
	>;
}) => {
	const mutationOptions = getUsersControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const usersControllerRemove = (id: string) => {
	return mutator<string>({ url: `/api/v1/users/${id}`, method: "DELETE" });
};

export const getUsersControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof usersControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof usersControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof usersControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return usersControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type UsersControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof usersControllerRemove>>
>;

export type UsersControllerRemoveMutationError = ErrorType<unknown>;

export const useUsersControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof usersControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}) => {
	const mutationOptions = getUsersControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};

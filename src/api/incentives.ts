/**
 * Generated by orval v6.24.0 🍺
 * Do not edit manually.
 * RemInr Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateIncentiveDto,
	IncentiveDto,
	IncentivesControllerCreate201,
	IncentivesControllerUpdate200,
	SuccessResponseDto,
	UpdateIncentiveDto,
} from "./models";
import { mutator } from "./mutators/index";
import type { ErrorType } from "./mutators/index";

export const incentivesControllerCreate = (createIncentiveDto: CreateIncentiveDto) => {
	return mutator<IncentivesControllerCreate201>({
		url: `/api/v1/incentives`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createIncentiveDto,
	});
};

export const getIncentivesControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof incentivesControllerCreate>>,
		TError,
		{ data: CreateIncentiveDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof incentivesControllerCreate>>,
	TError,
	{ data: CreateIncentiveDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof incentivesControllerCreate>>,
		{ data: CreateIncentiveDto }
	> = (props) => {
		const { data } = props ?? {};

		return incentivesControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type IncentivesControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof incentivesControllerCreate>>
>;
export type IncentivesControllerCreateMutationBody = CreateIncentiveDto;
export type IncentivesControllerCreateMutationError = ErrorType<unknown>;

export const useIncentivesControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof incentivesControllerCreate>>,
		TError,
		{ data: CreateIncentiveDto },
		TContext
	>;
}) => {
	const mutationOptions = getIncentivesControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const incentivesControllerFindAll = (signal?: AbortSignal) => {
	return mutator<IncentiveDto[]>({ url: `/api/v1/incentives`, method: "GET", signal });
};

export const getIncentivesControllerFindAllQueryKey = () => {
	return [`/api/v1/incentives`] as const;
};

export const getIncentivesControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof incentivesControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof incentivesControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getIncentivesControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof incentivesControllerFindAll>>> = ({
		signal,
	}) => incentivesControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof incentivesControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type IncentivesControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof incentivesControllerFindAll>>
>;
export type IncentivesControllerFindAllQueryError = ErrorType<unknown>;

export const useIncentivesControllerFindAll = <
	TData = Awaited<ReturnType<typeof incentivesControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof incentivesControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getIncentivesControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const incentivesControllerFindOne = (id: string, signal?: AbortSignal) => {
	return mutator<IncentiveDto>({ url: `/api/v1/incentives/${id}`, method: "GET", signal });
};

export const getIncentivesControllerFindOneQueryKey = (id: string) => {
	return [`/api/v1/incentives/${id}`] as const;
};

export const getIncentivesControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof incentivesControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof incentivesControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getIncentivesControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof incentivesControllerFindOne>>> = ({
		signal,
	}) => incentivesControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof incentivesControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type IncentivesControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof incentivesControllerFindOne>>
>;
export type IncentivesControllerFindOneQueryError = ErrorType<unknown>;

export const useIncentivesControllerFindOne = <
	TData = Awaited<ReturnType<typeof incentivesControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof incentivesControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getIncentivesControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const incentivesControllerUpdate = (id: string, updateIncentiveDto: UpdateIncentiveDto) => {
	return mutator<IncentivesControllerUpdate200>({
		url: `/api/v1/incentives/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateIncentiveDto,
	});
};

export const getIncentivesControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof incentivesControllerUpdate>>,
		TError,
		{ id: string; data: UpdateIncentiveDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof incentivesControllerUpdate>>,
	TError,
	{ id: string; data: UpdateIncentiveDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof incentivesControllerUpdate>>,
		{ id: string; data: UpdateIncentiveDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return incentivesControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type IncentivesControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof incentivesControllerUpdate>>
>;
export type IncentivesControllerUpdateMutationBody = UpdateIncentiveDto;
export type IncentivesControllerUpdateMutationError = ErrorType<unknown>;

export const useIncentivesControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof incentivesControllerUpdate>>,
		TError,
		{ id: string; data: UpdateIncentiveDto },
		TContext
	>;
}) => {
	const mutationOptions = getIncentivesControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const incentivesControllerRemove = (id: string) => {
	return mutator<SuccessResponseDto>({ url: `/api/v1/incentives/${id}`, method: "DELETE" });
};

export const getIncentivesControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof incentivesControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof incentivesControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof incentivesControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return incentivesControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type IncentivesControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof incentivesControllerRemove>>
>;

export type IncentivesControllerRemoveMutationError = ErrorType<unknown>;

export const useIncentivesControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof incentivesControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}) => {
	const mutationOptions = getIncentivesControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};

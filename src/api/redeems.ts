/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * RemInr Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateRedeemDto,
	RedeemDto,
	RedeemsControllerCreate201,
	RedeemsControllerUpdate200,
	SuccessResponseDto,
	UpdateRedeemDto,
} from "./models";
import { mutator } from "./mutators/index";
import type { ErrorType } from "./mutators/index";

export const redeemsControllerCreate = (createRedeemDto: CreateRedeemDto) => {
	return mutator<RedeemsControllerCreate201>({
		url: `/api/v1/redeems`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createRedeemDto,
	});
};

export const getRedeemsControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof redeemsControllerCreate>>,
		TError,
		{ data: CreateRedeemDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof redeemsControllerCreate>>,
	TError,
	{ data: CreateRedeemDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof redeemsControllerCreate>>,
		{ data: CreateRedeemDto }
	> = (props) => {
		const { data } = props ?? {};

		return redeemsControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RedeemsControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof redeemsControllerCreate>>
>;
export type RedeemsControllerCreateMutationBody = CreateRedeemDto;
export type RedeemsControllerCreateMutationError = ErrorType<unknown>;

export const useRedeemsControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof redeemsControllerCreate>>,
		TError,
		{ data: CreateRedeemDto },
		TContext
	>;
}) => {
	const mutationOptions = getRedeemsControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const redeemsControllerFindAll = (signal?: AbortSignal) => {
	return mutator<RedeemDto[]>({ url: `/api/v1/redeems`, method: "GET", signal });
};

export const getRedeemsControllerFindAllQueryKey = () => {
	return [`/api/v1/redeems`] as const;
};

export const getRedeemsControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof redeemsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof redeemsControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRedeemsControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof redeemsControllerFindAll>>> = ({
		signal,
	}) => redeemsControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof redeemsControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type RedeemsControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof redeemsControllerFindAll>>
>;
export type RedeemsControllerFindAllQueryError = ErrorType<unknown>;

export const useRedeemsControllerFindAll = <
	TData = Awaited<ReturnType<typeof redeemsControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof redeemsControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getRedeemsControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const redeemsControllerFindOne = (id: string, signal?: AbortSignal) => {
	return mutator<RedeemDto>({ url: `/api/v1/redeems/${id}`, method: "GET", signal });
};

export const getRedeemsControllerFindOneQueryKey = (id: string) => {
	return [`/api/v1/redeems/${id}`] as const;
};

export const getRedeemsControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof redeemsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof redeemsControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getRedeemsControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof redeemsControllerFindOne>>> = ({
		signal,
	}) => redeemsControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof redeemsControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type RedeemsControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof redeemsControllerFindOne>>
>;
export type RedeemsControllerFindOneQueryError = ErrorType<unknown>;

export const useRedeemsControllerFindOne = <
	TData = Awaited<ReturnType<typeof redeemsControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof redeemsControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getRedeemsControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const redeemsControllerUpdate = (id: string, updateRedeemDto: UpdateRedeemDto) => {
	return mutator<RedeemsControllerUpdate200>({
		url: `/api/v1/redeems/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateRedeemDto,
	});
};

export const getRedeemsControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof redeemsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateRedeemDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof redeemsControllerUpdate>>,
	TError,
	{ id: string; data: UpdateRedeemDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof redeemsControllerUpdate>>,
		{ id: string; data: UpdateRedeemDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return redeemsControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type RedeemsControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof redeemsControllerUpdate>>
>;
export type RedeemsControllerUpdateMutationBody = UpdateRedeemDto;
export type RedeemsControllerUpdateMutationError = ErrorType<unknown>;

export const useRedeemsControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof redeemsControllerUpdate>>,
		TError,
		{ id: string; data: UpdateRedeemDto },
		TContext
	>;
}) => {
	const mutationOptions = getRedeemsControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const redeemsControllerRemove = (id: string) => {
	return mutator<SuccessResponseDto>({ url: `/api/v1/redeems/${id}`, method: "DELETE" });
};

export const getRedeemsControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof redeemsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof redeemsControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof redeemsControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return redeemsControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type RedeemsControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof redeemsControllerRemove>>
>;

export type RedeemsControllerRemoveMutationError = ErrorType<unknown>;

export const useRedeemsControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof redeemsControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}) => {
	const mutationOptions = getRedeemsControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};

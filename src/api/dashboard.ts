/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * RemInr Api
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
	QueryFunction,
	QueryKey,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type { DashboardDataDto } from "./models";
import { mutator } from "./mutators/index";
import type { ErrorType } from "./mutators/index";

export const dashboardControllerGetDashboardData = (signal?: AbortSignal) => {
	return mutator<DashboardDataDto>({ url: `/api/v1/dashboard`, method: "GET", signal });
};

export const getDashboardControllerGetDashboardDataQueryKey = () => {
	return [`/api/v1/dashboard`] as const;
};

export const getDashboardControllerGetDashboardDataQueryOptions = <
	TData = Awaited<ReturnType<typeof dashboardControllerGetDashboardData>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof dashboardControllerGetDashboardData>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getDashboardControllerGetDashboardDataQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardControllerGetDashboardData>>> = ({
		signal,
	}) => dashboardControllerGetDashboardData(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof dashboardControllerGetDashboardData>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type DashboardControllerGetDashboardDataQueryResult = NonNullable<
	Awaited<ReturnType<typeof dashboardControllerGetDashboardData>>
>;
export type DashboardControllerGetDashboardDataQueryError = ErrorType<unknown>;

export const useDashboardControllerGetDashboardData = <
	TData = Awaited<ReturnType<typeof dashboardControllerGetDashboardData>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof dashboardControllerGetDashboardData>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getDashboardControllerGetDashboardDataQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * RemInr Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	ContactRequestControllerCreate201,
	ContactRequestControllerUpdate200,
	ContactRequestDto,
	CreateContactRequestDto,
	SuccessResponseDto,
	UpdateContactRequestDto,
} from "./models";
import { mutator } from "./mutators/index";
import type { ErrorType } from "./mutators/index";

export const contactRequestControllerCreate = (
	createContactRequestDto: CreateContactRequestDto,
) => {
	return mutator<ContactRequestControllerCreate201>({
		url: `/v1/contact-request`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createContactRequestDto,
	});
};

export const getContactRequestControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof contactRequestControllerCreate>>,
		TError,
		{ data: CreateContactRequestDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof contactRequestControllerCreate>>,
	TError,
	{ data: CreateContactRequestDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof contactRequestControllerCreate>>,
		{ data: CreateContactRequestDto }
	> = (props) => {
		const { data } = props ?? {};

		return contactRequestControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ContactRequestControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof contactRequestControllerCreate>>
>;
export type ContactRequestControllerCreateMutationBody = CreateContactRequestDto;
export type ContactRequestControllerCreateMutationError = ErrorType<unknown>;

export const useContactRequestControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof contactRequestControllerCreate>>,
		TError,
		{ data: CreateContactRequestDto },
		TContext
	>;
}) => {
	const mutationOptions = getContactRequestControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const contactRequestControllerFindAll = (signal?: AbortSignal) => {
	return mutator<ContactRequestDto[]>({ url: `/v1/contact-request`, method: "GET", signal });
};

export const getContactRequestControllerFindAllQueryKey = () => {
	return [`/v1/contact-request`] as const;
};

export const getContactRequestControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof contactRequestControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof contactRequestControllerFindAll>>, TError, TData>
	>;
}) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getContactRequestControllerFindAllQueryKey();

	const queryFn: QueryFunction<Awaited<ReturnType<typeof contactRequestControllerFindAll>>> = ({
		signal,
	}) => contactRequestControllerFindAll(signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof contactRequestControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ContactRequestControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof contactRequestControllerFindAll>>
>;
export type ContactRequestControllerFindAllQueryError = ErrorType<unknown>;

export const useContactRequestControllerFindAll = <
	TData = Awaited<ReturnType<typeof contactRequestControllerFindAll>>,
	TError = ErrorType<unknown>,
>(options?: {
	query?: Partial<
		UseQueryOptions<Awaited<ReturnType<typeof contactRequestControllerFindAll>>, TError, TData>
	>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getContactRequestControllerFindAllQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const contactRequestControllerFindOne = (id: string, signal?: AbortSignal) => {
	return mutator<ContactRequestDto>({ url: `/v1/contact-request/${id}`, method: "GET", signal });
};

export const getContactRequestControllerFindOneQueryKey = (id: string) => {
	return [`/v1/contact-request/${id}`] as const;
};

export const getContactRequestControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof contactRequestControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof contactRequestControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getContactRequestControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof contactRequestControllerFindOne>>> = ({
		signal,
	}) => contactRequestControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof contactRequestControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type ContactRequestControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof contactRequestControllerFindOne>>
>;
export type ContactRequestControllerFindOneQueryError = ErrorType<unknown>;

export const useContactRequestControllerFindOne = <
	TData = Awaited<ReturnType<typeof contactRequestControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof contactRequestControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getContactRequestControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const contactRequestControllerUpdate = (
	id: string,
	updateContactRequestDto: UpdateContactRequestDto,
) => {
	return mutator<ContactRequestControllerUpdate200>({
		url: `/v1/contact-request/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateContactRequestDto,
	});
};

export const getContactRequestControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof contactRequestControllerUpdate>>,
		TError,
		{ id: string; data: UpdateContactRequestDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof contactRequestControllerUpdate>>,
	TError,
	{ id: string; data: UpdateContactRequestDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof contactRequestControllerUpdate>>,
		{ id: string; data: UpdateContactRequestDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return contactRequestControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type ContactRequestControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof contactRequestControllerUpdate>>
>;
export type ContactRequestControllerUpdateMutationBody = UpdateContactRequestDto;
export type ContactRequestControllerUpdateMutationError = ErrorType<unknown>;

export const useContactRequestControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof contactRequestControllerUpdate>>,
		TError,
		{ id: string; data: UpdateContactRequestDto },
		TContext
	>;
}) => {
	const mutationOptions = getContactRequestControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const contactRequestControllerRemove = (id: string) => {
	return mutator<SuccessResponseDto>({ url: `/v1/contact-request/${id}`, method: "DELETE" });
};

export const getContactRequestControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof contactRequestControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof contactRequestControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof contactRequestControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return contactRequestControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type ContactRequestControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof contactRequestControllerRemove>>
>;

export type ContactRequestControllerRemoveMutationError = ErrorType<unknown>;

export const useContactRequestControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof contactRequestControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}) => {
	const mutationOptions = getContactRequestControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};

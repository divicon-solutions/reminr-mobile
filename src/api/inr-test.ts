/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * RemInr Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CreateInrTestDto,
	InrTestControllerCreate201,
	InrTestControllerFindAllParams,
	InrTestControllerUpdate200,
	InrTestDto,
	SuccessResponseDto,
	UpdateInrTestDto,
} from "./models";
import { mutator } from "./mutators/index";
import type { ErrorType } from "./mutators/index";

export const inrTestControllerCreate = (createInrTestDto: CreateInrTestDto) => {
	return mutator<InrTestControllerCreate201>({
		url: `/v1/inr-test`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createInrTestDto,
	});
};

export const getInrTestControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof inrTestControllerCreate>>,
		TError,
		{ data: CreateInrTestDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof inrTestControllerCreate>>,
	TError,
	{ data: CreateInrTestDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof inrTestControllerCreate>>,
		{ data: CreateInrTestDto }
	> = (props) => {
		const { data } = props ?? {};

		return inrTestControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type InrTestControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof inrTestControllerCreate>>
>;
export type InrTestControllerCreateMutationBody = CreateInrTestDto;
export type InrTestControllerCreateMutationError = ErrorType<unknown>;

export const useInrTestControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof inrTestControllerCreate>>,
		TError,
		{ data: CreateInrTestDto },
		TContext
	>;
}) => {
	const mutationOptions = getInrTestControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const inrTestControllerFindAll = (
	params?: InrTestControllerFindAllParams,
	signal?: AbortSignal,
) => {
	return mutator<InrTestDto[]>({ url: `/v1/inr-test`, method: "GET", params, signal });
};

export const getInrTestControllerFindAllQueryKey = (params?: InrTestControllerFindAllParams) => {
	return [`/v1/inr-test`, ...(params ? [params] : [])] as const;
};

export const getInrTestControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof inrTestControllerFindAll>>,
	TError = ErrorType<unknown>,
>(
	params?: InrTestControllerFindAllParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof inrTestControllerFindAll>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getInrTestControllerFindAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof inrTestControllerFindAll>>> = ({
		signal,
	}) => inrTestControllerFindAll(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof inrTestControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type InrTestControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof inrTestControllerFindAll>>
>;
export type InrTestControllerFindAllQueryError = ErrorType<unknown>;

export const useInrTestControllerFindAll = <
	TData = Awaited<ReturnType<typeof inrTestControllerFindAll>>,
	TError = ErrorType<unknown>,
>(
	params?: InrTestControllerFindAllParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof inrTestControllerFindAll>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getInrTestControllerFindAllQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const inrTestControllerFindOne = (id: string, signal?: AbortSignal) => {
	return mutator<InrTestDto>({ url: `/v1/inr-test/${id}`, method: "GET", signal });
};

export const getInrTestControllerFindOneQueryKey = (id: string) => {
	return [`/v1/inr-test/${id}`] as const;
};

export const getInrTestControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof inrTestControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof inrTestControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getInrTestControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof inrTestControllerFindOne>>> = ({
		signal,
	}) => inrTestControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof inrTestControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type InrTestControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof inrTestControllerFindOne>>
>;
export type InrTestControllerFindOneQueryError = ErrorType<unknown>;

export const useInrTestControllerFindOne = <
	TData = Awaited<ReturnType<typeof inrTestControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof inrTestControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getInrTestControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const inrTestControllerUpdate = (id: string, updateInrTestDto: UpdateInrTestDto) => {
	return mutator<InrTestControllerUpdate200>({
		url: `/v1/inr-test/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateInrTestDto,
	});
};

export const getInrTestControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof inrTestControllerUpdate>>,
		TError,
		{ id: string; data: UpdateInrTestDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof inrTestControllerUpdate>>,
	TError,
	{ id: string; data: UpdateInrTestDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof inrTestControllerUpdate>>,
		{ id: string; data: UpdateInrTestDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return inrTestControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type InrTestControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof inrTestControllerUpdate>>
>;
export type InrTestControllerUpdateMutationBody = UpdateInrTestDto;
export type InrTestControllerUpdateMutationError = ErrorType<unknown>;

export const useInrTestControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof inrTestControllerUpdate>>,
		TError,
		{ id: string; data: UpdateInrTestDto },
		TContext
	>;
}) => {
	const mutationOptions = getInrTestControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const inrTestControllerRemove = (id: string) => {
	return mutator<SuccessResponseDto>({ url: `/v1/inr-test/${id}`, method: "DELETE" });
};

export const getInrTestControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof inrTestControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof inrTestControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof inrTestControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return inrTestControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type InrTestControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof inrTestControllerRemove>>
>;

export type InrTestControllerRemoveMutationError = ErrorType<unknown>;

export const useInrTestControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof inrTestControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}) => {
	const mutationOptions = getInrTestControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};

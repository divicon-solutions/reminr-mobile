/**
 * Generated by orval v6.25.0 🍺
 * Do not edit manually.
 * RemInr Api
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
	MutationFunction,
	QueryFunction,
	QueryKey,
	UseMutationOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
import type {
	CallbackRequestControllerCreate201,
	CallbackRequestControllerFindAllParams,
	CallbackRequestControllerUpdate200,
	CallbackRequestDto,
	CreateCallbackRequestDto,
	SuccessResponseDto,
	UpdateCallbackRequestDto,
} from "./models";
import { mutator } from "./mutators/index";
import type { ErrorType } from "./mutators/index";

export const callbackRequestControllerCreate = (
	createCallbackRequestDto: CreateCallbackRequestDto,
) => {
	return mutator<CallbackRequestControllerCreate201>({
		url: `/api/v1/callback-request`,
		method: "POST",
		headers: { "Content-Type": "application/json" },
		data: createCallbackRequestDto,
	});
};

export const getCallbackRequestControllerCreateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof callbackRequestControllerCreate>>,
		TError,
		{ data: CreateCallbackRequestDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof callbackRequestControllerCreate>>,
	TError,
	{ data: CreateCallbackRequestDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof callbackRequestControllerCreate>>,
		{ data: CreateCallbackRequestDto }
	> = (props) => {
		const { data } = props ?? {};

		return callbackRequestControllerCreate(data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CallbackRequestControllerCreateMutationResult = NonNullable<
	Awaited<ReturnType<typeof callbackRequestControllerCreate>>
>;
export type CallbackRequestControllerCreateMutationBody = CreateCallbackRequestDto;
export type CallbackRequestControllerCreateMutationError = ErrorType<unknown>;

export const useCallbackRequestControllerCreate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof callbackRequestControllerCreate>>,
		TError,
		{ data: CreateCallbackRequestDto },
		TContext
	>;
}) => {
	const mutationOptions = getCallbackRequestControllerCreateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const callbackRequestControllerFindAll = (
	params?: CallbackRequestControllerFindAllParams,
	signal?: AbortSignal,
) => {
	return mutator<CallbackRequestDto[]>({
		url: `/api/v1/callback-request`,
		method: "GET",
		params,
		signal,
	});
};

export const getCallbackRequestControllerFindAllQueryKey = (
	params?: CallbackRequestControllerFindAllParams,
) => {
	return [`/api/v1/callback-request`, ...(params ? [params] : [])] as const;
};

export const getCallbackRequestControllerFindAllQueryOptions = <
	TData = Awaited<ReturnType<typeof callbackRequestControllerFindAll>>,
	TError = ErrorType<unknown>,
>(
	params?: CallbackRequestControllerFindAllParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof callbackRequestControllerFindAll>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCallbackRequestControllerFindAllQueryKey(params);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof callbackRequestControllerFindAll>>> = ({
		signal,
	}) => callbackRequestControllerFindAll(params, signal);

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof callbackRequestControllerFindAll>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CallbackRequestControllerFindAllQueryResult = NonNullable<
	Awaited<ReturnType<typeof callbackRequestControllerFindAll>>
>;
export type CallbackRequestControllerFindAllQueryError = ErrorType<unknown>;

export const useCallbackRequestControllerFindAll = <
	TData = Awaited<ReturnType<typeof callbackRequestControllerFindAll>>,
	TError = ErrorType<unknown>,
>(
	params?: CallbackRequestControllerFindAllParams,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof callbackRequestControllerFindAll>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCallbackRequestControllerFindAllQueryOptions(params, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const callbackRequestControllerFindOne = (id: string, signal?: AbortSignal) => {
	return mutator<CallbackRequestDto>({
		url: `/api/v1/callback-request/${id}`,
		method: "GET",
		signal,
	});
};

export const getCallbackRequestControllerFindOneQueryKey = (id: string) => {
	return [`/api/v1/callback-request/${id}`] as const;
};

export const getCallbackRequestControllerFindOneQueryOptions = <
	TData = Awaited<ReturnType<typeof callbackRequestControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof callbackRequestControllerFindOne>>, TError, TData>
		>;
	},
) => {
	const { query: queryOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getCallbackRequestControllerFindOneQueryKey(id);

	const queryFn: QueryFunction<Awaited<ReturnType<typeof callbackRequestControllerFindOne>>> = ({
		signal,
	}) => callbackRequestControllerFindOne(id, signal);

	return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof callbackRequestControllerFindOne>>,
		TError,
		TData
	> & { queryKey: QueryKey };
};

export type CallbackRequestControllerFindOneQueryResult = NonNullable<
	Awaited<ReturnType<typeof callbackRequestControllerFindOne>>
>;
export type CallbackRequestControllerFindOneQueryError = ErrorType<unknown>;

export const useCallbackRequestControllerFindOne = <
	TData = Awaited<ReturnType<typeof callbackRequestControllerFindOne>>,
	TError = ErrorType<unknown>,
>(
	id: string,
	options?: {
		query?: Partial<
			UseQueryOptions<Awaited<ReturnType<typeof callbackRequestControllerFindOne>>, TError, TData>
		>;
	},
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
	const queryOptions = getCallbackRequestControllerFindOneQueryOptions(id, options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

	query.queryKey = queryOptions.queryKey;

	return query;
};

export const callbackRequestControllerUpdate = (
	id: string,
	updateCallbackRequestDto: UpdateCallbackRequestDto,
) => {
	return mutator<CallbackRequestControllerUpdate200>({
		url: `/api/v1/callback-request/${id}`,
		method: "PATCH",
		headers: { "Content-Type": "application/json" },
		data: updateCallbackRequestDto,
	});
};

export const getCallbackRequestControllerUpdateMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof callbackRequestControllerUpdate>>,
		TError,
		{ id: string; data: UpdateCallbackRequestDto },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof callbackRequestControllerUpdate>>,
	TError,
	{ id: string; data: UpdateCallbackRequestDto },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof callbackRequestControllerUpdate>>,
		{ id: string; data: UpdateCallbackRequestDto }
	> = (props) => {
		const { id, data } = props ?? {};

		return callbackRequestControllerUpdate(id, data);
	};

	return { mutationFn, ...mutationOptions };
};

export type CallbackRequestControllerUpdateMutationResult = NonNullable<
	Awaited<ReturnType<typeof callbackRequestControllerUpdate>>
>;
export type CallbackRequestControllerUpdateMutationBody = UpdateCallbackRequestDto;
export type CallbackRequestControllerUpdateMutationError = ErrorType<unknown>;

export const useCallbackRequestControllerUpdate = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof callbackRequestControllerUpdate>>,
		TError,
		{ id: string; data: UpdateCallbackRequestDto },
		TContext
	>;
}) => {
	const mutationOptions = getCallbackRequestControllerUpdateMutationOptions(options);

	return useMutation(mutationOptions);
};
export const callbackRequestControllerRemove = (id: string) => {
	return mutator<SuccessResponseDto>({ url: `/api/v1/callback-request/${id}`, method: "DELETE" });
};

export const getCallbackRequestControllerRemoveMutationOptions = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof callbackRequestControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}): UseMutationOptions<
	Awaited<ReturnType<typeof callbackRequestControllerRemove>>,
	TError,
	{ id: string },
	TContext
> => {
	const { mutation: mutationOptions } = options ?? {};

	const mutationFn: MutationFunction<
		Awaited<ReturnType<typeof callbackRequestControllerRemove>>,
		{ id: string }
	> = (props) => {
		const { id } = props ?? {};

		return callbackRequestControllerRemove(id);
	};

	return { mutationFn, ...mutationOptions };
};

export type CallbackRequestControllerRemoveMutationResult = NonNullable<
	Awaited<ReturnType<typeof callbackRequestControllerRemove>>
>;

export type CallbackRequestControllerRemoveMutationError = ErrorType<unknown>;

export const useCallbackRequestControllerRemove = <
	TError = ErrorType<unknown>,
	TContext = unknown,
>(options?: {
	mutation?: UseMutationOptions<
		Awaited<ReturnType<typeof callbackRequestControllerRemove>>,
		TError,
		{ id: string },
		TContext
	>;
}) => {
	const mutationOptions = getCallbackRequestControllerRemoveMutationOptions(options);

	return useMutation(mutationOptions);
};
